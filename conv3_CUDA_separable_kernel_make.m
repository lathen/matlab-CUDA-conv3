
function k = conv3_CUDA_separable_kernel_make(kernel_radius, threads_per_block, computations_per_thread)

if nargin < 2
    threads_per_block(1,:) = [8 8 2];
    threads_per_block(2,:) = [8 8 2];
    threads_per_block(3,:) = [8 2 8];
end

if nargin < 3
    computations_per_thread = [4 4 4];
end

if isscalar(kernel_radius)
    kernel_radius = kernel_radius*ones(3,1);
end

script_dir = fileparts(mfilename('fullpath'));

% Save the path and add the utils and kernels directory
P = path;
addpath(fullfile(script_dir, 'kernels'));
addpath(fullfile(script_dir, 'utils'));

kernels_dir = fullfile(script_dir,'kernels');

if verLessThan('distcomp', '6.0')
    constant_mem = 0;
    prototype = 'float *, const float *, const int *, const float *';
else
    constant_mem = 1;
    prototype = 'float *, const float *';
end

%% Rows kernel
kernel_name = ['convolutionRows_kernel_', ...
    int2str(threads_per_block(1,1)), ...
    int2str(threads_per_block(1,2)), ...
    int2str(threads_per_block(1,3)), ...
    int2str(computations_per_thread(1)), ...
    int2str(kernel_radius(1)), ...
    int2str(constant_mem), ...
    '.ptx'];

if ~exist(kernel_name, 'file')
    disp(['Compiling kernel ',kernel_name,'...']);
    nvcc('-ptx', ...
        ['-o "',fullfile(kernels_dir,kernel_name),'"'], ...
        ['-D"BLOCKDIM_X=',int2str(threads_per_block(1,1)),'"'], ...
        ['-D"BLOCKDIM_Y=',int2str(threads_per_block(1,2)),'"'], ...
        ['-D"BLOCKDIM_Z=',int2str(threads_per_block(1,3)),'"'], ...
        ['-D"RESULT_STEPS=',int2str(computations_per_thread(1)),'"'], ...
        ['-D"HALO_STEPS=',int2str(ceil(kernel_radius(1)/threads_per_block(1,1))),'"'], ...
        ['-D"KERNEL_RADIUS=',int2str(kernel_radius(1)),'"'], ...
        ['-D"CONSTANT_MEM=',int2str(constant_mem),'"'], ...
        ['"',fullfile(kernels_dir,'convolutionRows_kernel.cu'),'"']);
else
    disp(['Loading kernel ',kernel_name,' from cache...']);
end

% Create kernel object
k.rows.kernel = parallel.gpu.CUDAKernel(kernel_name, prototype);
k.rows.kernel.ThreadBlockSize = threads_per_block(1,:);
k.rows.computations_per_thread = computations_per_thread(1);


%% Columns kernel
kernel_name = ['convolutionColumns_kernel_', ...
    int2str(threads_per_block(2,1)), ...
    int2str(threads_per_block(2,2)), ...
    int2str(threads_per_block(2,3)), ...
    int2str(computations_per_thread(2)), ...
    int2str(kernel_radius(2)), ...
    int2str(constant_mem), ...
    '.ptx'];

if ~exist(kernel_name, 'file')
    disp(['Compiling kernel ',kernel_name,'...']);
    nvcc('-ptx', ...
        ['-o "',fullfile(kernels_dir,kernel_name),'"'], ...
        ['-D"BLOCKDIM_X=',int2str(threads_per_block(2,1)),'"'], ...
        ['-D"BLOCKDIM_Y=',int2str(threads_per_block(2,2)),'"'], ...
        ['-D"BLOCKDIM_Z=',int2str(threads_per_block(2,3)),'"'], ...
        ['-D"RESULT_STEPS=',int2str(computations_per_thread(2)),'"'], ...
        ['-D"HALO_STEPS=',int2str(ceil(kernel_radius(2)/threads_per_block(2,2))),'"'], ...
        ['-D"KERNEL_RADIUS=',int2str(kernel_radius(2)),'"'], ...
        ['-D"CONSTANT_MEM=',int2str(constant_mem),'"'], ...
        ['"',fullfile(kernels_dir,'convolutionColumns_kernel.cu'),'"']);
else
    disp(['Loading kernel ',kernel_name,' from cache...']);
end

% Create kernel object
k.cols.kernel = parallel.gpu.CUDAKernel(kernel_name, prototype);
k.cols.kernel.ThreadBlockSize = threads_per_block(2,:);
k.cols.computations_per_thread = computations_per_thread(2);


%% Slices kernel
kernel_name = ['convolutionSlices_kernel_', ...
    int2str(threads_per_block(3,1)), ...
    int2str(threads_per_block(3,2)), ...
    int2str(threads_per_block(3,3)), ...
    int2str(computations_per_thread(3)), ...
    int2str(kernel_radius(3)), ...
    int2str(constant_mem), ...
    '.ptx'];

if ~exist(kernel_name, 'file')
    disp(['Compiling kernel ',kernel_name,'...']);
    nvcc('-ptx', ...
        ['-o "',fullfile(kernels_dir,kernel_name),'"'], ...
        ['-D"BLOCKDIM_X=',int2str(threads_per_block(3,1)),'"'], ...
        ['-D"BLOCKDIM_Y=',int2str(threads_per_block(3,2)),'"'], ...
        ['-D"BLOCKDIM_Z=',int2str(threads_per_block(3,3)),'"'], ...
        ['-D"RESULT_STEPS=',int2str(computations_per_thread(3)),'"'], ...
        ['-D"HALO_STEPS=',int2str(ceil(kernel_radius(3)/threads_per_block(3,3))),'"'], ...
        ['-D"KERNEL_RADIUS=',int2str(kernel_radius(3)),'"'], ...
        ['-D"CONSTANT_MEM=',int2str(constant_mem),'"'], ...
        ['"',fullfile(kernels_dir,'convolutionSlices_kernel.cu'),'"']);
else
    disp(['Loading kernel ',kernel_name,' from cache...']);
end

% Create kernel object
k.slices.kernel = parallel.gpu.CUDAKernel(kernel_name, prototype);
k.slices.kernel.ThreadBlockSize = threads_per_block(3,:);
k.slices.computations_per_thread = computations_per_thread(3);

% Reset the path
path(P);
